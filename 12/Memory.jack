// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory, free_list;

    /** Initializes the class. */
    function void init() {
      var int heap_len;

      let memory = 0; // "proxy" of RAM
      let heap_len = 16383 - 2048 + 1;

      let free_list = 2048;
      let free_list[0] = len - 2; // len of block
      let free_list[1] = null; // pointer to next free block
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let memory[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array prev, found, next;
      var int block_size;

      let prev = Memory.bestFit(size);
      if (prev = 16384) { // cur_block was null 
        let found = null;
      } else {
        if (prev = null) {
          let found = free_list;
          
          if (found[0] > (size + 1 + 2)) {
            let next = found + size + 1;
            let next[1] = found[1];
            let next[0] = found[0];
            let found = found + 1;
            let found[-1] = size + 1;
          } else {
            let next = found[1];
            let block_size = found[0]; 
            let found = found + 1;
            let found[-1] = block_size;
          }

          let free_list = next;

        } else {
          let found = prev[1];
          // incomplete
        }
      }

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
    }    

    function Array bestFit(int size) {
      var Array best_block, prev_block, cur_block;
      var int best_size, cur_size;

      let best_size = 16363 - 2048 + 1;
      let best_block = 16384;
      let cur_block = free_list;
      let prev_block = null;

      while (~(cur_block = null)) {
        let cur_size = cur_block[0]-1; // check size from behind furthest block into middle of heap
        if (~(cur_size < size) & (cur_size < best_size)) {
          // new best block
          let best_block = prev_block;
          let best_size = cur_size;
        }
        let prev_block = cur_block;
        let cur_block = cur_block[1];
      }

      return best_block;
    }
}
