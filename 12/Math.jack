// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
      let n = 16;
      let powersOfTwo = Array.new(n);
      let powersOfTwo[0] = 1;
      let powersOfTwo[1] = 2;
      let powersOfTwo[2] = 4;
      let powersOfTwo[3] = 8;
      let powersOfTwo[4] = 16;
      let powersOfTwo[5] = 32;
      let powersOfTwo[6] = 64;
      let powersOfTwo[7] = 128;
      let powersOfTwo[8] = 256;
      let powersOfTwo[9] = 512;
      let powersOfTwo[10] = 1024;
      let powersOfTwo[11] = 2048;
      let powersOfTwo[12] = 4096;
      let powersOfTwo[13] = 8192;
      let powersOfTwo[14] = 16384;
      let powersOfTwo[15] = 16384 + 16384; // This is 2's complement so half (2^14) is for negatives and the rest postiive
      return;
    }

    function boolean bit(int x, int j) {
      return ~((x & powersOfTwo[j]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
      var int sum, shiftedX, j;

      let sum = 0;
      let shiftedX = x;
      let j = 0;
      while (j < n) {
        if (Math.bit(y, j) = true) {
          let sum = sum + shiftedX;
          return sum;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }
      return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
      var int q, quotient, neg_x, neg_y;

      let neg_x = x < 0;
      let neg_y = y < 0;
      let x = Math.abs(x);
      let y = Math.abs(y);

      if (y > x) {
        return 0;
      }
      let q = Math.divide(x, y+y);
      if (x - (2*q*y) < y) {
        let quotient = q+q;
      } else {
        let quotient = q+q+1;
      }

      if (neg_x = neg_y) {
        return quotient;
      } else {
        return -quotient;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y,j, sqrt_search, sqrt_search_sqr;
      let y = 0;
      let j = Math.divide(n,2)-1; // 7
      let sqrt_search = y + powersOfTwo[j];
      let sqrt_search_sqr = sqrt_search * sqrt_search;

      while (j > -1) {
        if (~(sqrt_search_sqr > x) & (sqrt_search_sqr > 0)) {
          let y = sqrt_search;
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      } else {
        return b;
      }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      } else {
        return b;
      }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        let x = -x;
      }
      return x;
    }
}

